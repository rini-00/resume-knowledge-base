#!/bin/bash
# Backend linting script for Python code

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Function to create divider
printf_divider() {
    printf '=%.0s' {1..60}
    printf '\n'
}

# Function to print status
print_status() {
    local status=$1
    local message=$2
    case $status in
        "PASS")
            echo -e "${GREEN}‚úì $message${NC}"
            ;;
        "FAIL")
            echo -e "${RED}‚úó $message${NC}"
            ;;
        "WARN")
            echo -e "${YELLOW}‚ö† $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚Ñπ $message${NC}"
            ;;
    esac
}

echo -e "${BLUE}üîß Backend Linting${NC}"
printf_divider

# Initialize counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Check if we're in a git repository
if ! git rev-parse --show-toplevel >/dev/null 2>&1; then
    print_status "FAIL" "Not in a Git repository"
    exit 1
fi

# Get repository root
REPO_ROOT=$(git rev-parse --show-toplevel)
cd "$REPO_ROOT" || exit 1

# Check if Python files exist
if ! find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | head -1 | grep -q .; then
    print_status "WARN" "No Python files found to lint"
    exit 0
fi

# Check if virtual environment is activated
if [[ -z "$VIRTUAL_ENV" ]]; then
    print_status "WARN" "Virtual environment not detected - consider activating one"
fi

echo -e "\n${BLUE}üêç Running Black (Code Formatting)${NC}"
printf_divider
((TOTAL_CHECKS++))

if command -v black >/dev/null 2>&1; then
    if black --check --diff api/ 2>/dev/null; then
        print_status "PASS" "Black: Code formatting is correct"
        ((PASSED_CHECKS++))
    else
        print_status "FAIL" "Black: Code formatting issues found"
        echo "Running black to fix formatting..."
        black api/ 2>/dev/null || true
        ((FAILED_CHECKS++))
    fi
else
    print_status "WARN" "Black not installed - skipping formatting check"
fi

echo -e "\n${BLUE}üìè Running Flake8 (Style Guide)${NC}"
printf_divider
((TOTAL_CHECKS++))

if command -v flake8 >/dev/null 2>&1; then
    if flake8 api/ 2>/dev/null; then
        print_status "PASS" "Flake8: Style guide compliance passed"
        ((PASSED_CHECKS++))
    else
        print_status "FAIL" "Flake8: Style guide violations found"
        flake8 api/ || true
        ((FAILED_CHECKS++))
    fi
else
    print_status "WARN" "Flake8 not installed - skipping style check"
fi

echo -e "\n${BLUE}üîç Running MyPy (Type Checking)${NC}"
printf_divider
((TOTAL_CHECKS++))

if command -v mypy >/dev/null 2>&1; then
    if mypy api/ 2>/dev/null; then
        print_status "PASS" "MyPy: Type checking passed"
        ((PASSED_CHECKS++))
    else
        print_status "FAIL" "MyPy: Type checking issues found"
        mypy api/ || true
        ((FAILED_CHECKS++))
    fi
else
    print_status "WARN" "MyPy not installed - skipping type checking"
fi

echo -e "\n${BLUE}üîê Running Bandit (Security Check)${NC}"
printf_divider
((TOTAL_CHECKS++))

if command -v bandit >/dev/null 2>&1; then
    if bandit -r api/ -f json -o /tmp/bandit-report.json 2>/dev/null; then
        print_status "PASS" "Bandit: Security check passed"
        ((PASSED_CHECKS++))
    else
        print_status "FAIL" "Bandit: Security issues found"
        bandit -r api/ || true
        ((FAILED_CHECKS++))
    fi
else
    print_status "WARN" "Bandit not installed - skipping security check"
fi

echo -e "\n${BLUE}üêö Running ShellCheck (Shell Scripts)${NC}"
printf_divider
((TOTAL_CHECKS++))

if command -v shellcheck >/dev/null 2>&1; then
    shell_files=$(find . -name "*.sh" -not -path "./venv/*" -not -path "./.venv/*" 2>/dev/null)
    if [[ -n "$shell_files" ]]; then
        if echo "$shell_files" | xargs shellcheck 2>/dev/null; then
            print_status "PASS" "ShellCheck: Shell script check passed"
            ((PASSED_CHECKS++))
        else
            print_status "FAIL" "ShellCheck: Shell script issues found"
            echo "$shell_files" | xargs shellcheck || true
            ((FAILED_CHECKS++))
        fi
    else
        print_status "INFO" "ShellCheck: No shell scripts found"
        ((PASSED_CHECKS++))
    fi
else
    print_status "WARN" "ShellCheck not installed - skipping shell script check"
fi

# Print summary
echo -e "\n"
printf_divider
echo -e "${BLUE}BACKEND LINTING SUMMARY${NC}"
printf_divider

echo "Total Checks: $TOTAL_CHECKS"
echo -e "${GREEN}Passed: $PASSED_CHECKS${NC}"
echo -e "${RED}Failed: $FAILED_CHECKS${NC}"

if [ $FAILED_CHECKS -eq 0 ]; then
    echo -e "\n${GREEN}üéâ All backend linting checks passed!${NC}"
    echo -e "${GREEN}‚úÖ Code quality validated${NC}"
    exit 0
else
    echo -e "\n${RED}‚ö†Ô∏è  Backend linting issues found${NC}"
    echo -e "${RED}‚ùå Fix issues before deployment${NC}"
    exit 1
fi