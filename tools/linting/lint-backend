#!/bin/bash

# Backend Linting Script
# Comprehensive Python linting for the Resume Logger backend

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    if [ "$status" = "PASS" ]; then
        echo -e "${GREEN}✅ $message${NC}"
        ((PASSED_CHECKS++))
    elif [ "$status" = "FAIL" ]; then
        echo -e "${RED}❌ $message${NC}"
        ((FAILED_CHECKS++))
    elif [ "$status" = "INFO" ]; then
        echo -e "${BLUE}ℹ️  $message${NC}"
    elif [ "$status" = "WARN" ]; then
        echo -e "${YELLOW}⚠️  $message${NC}"
    fi
    ((TOTAL_CHECKS++))
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install missing dependencies
install_dependencies() {
    echo -e "${BLUE}📦 Checking backend linting dependencies...${NC}"
    
    # Check if requirements-dev.txt exists
    if [ ! -f "requirements-dev.txt" ]; then
        echo "Creating requirements-dev.txt..."
        cat > requirements-dev.txt << EOF
# Development Dependencies for Backend Linting
black>=23.7.0
flake8>=6.0.0
mypy>=1.5.0
bandit>=1.7.5
EOF
    fi
    
    # Install dependencies if not available
    if ! command_exists black || ! command_exists flake8 || ! command_exists mypy || ! command_exists bandit; then
        echo "Installing linting dependencies..."
        pip install -r requirements-dev.txt
    fi
}

# Function to run Black formatting
run_black() {
    echo -e "\n${BLUE}🔧 Running Black Code Formatting${NC}"
    echo "================================================"
    
    if ! command_exists black; then
        print_status "FAIL" "Black not installed"
        return 1
    fi
    
    # Check if pyproject.toml exists for Black config
    if [ ! -f "pyproject.toml" ]; then
        echo "Creating pyproject.toml for Black configuration..."
        cat > pyproject.toml << EOF
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
EOF
    fi
    
    # Run Black on backend files
    backend_files="api/"
    if [ -d "$backend_files" ]; then
        echo "Formatting Python files in $backend_files..."
        if black --check --diff $backend_files 2>/dev/null; then
            print_status "PASS" "Code formatting (black): Already formatted correctly"
        else
            echo "Applying Black formatting..."
            black $backend_files
            print_status "PASS" "Code formatting (black): Applied successfully"
        fi
    else
        print_status "WARN" "Backend directory 'api/' not found"
    fi
    
    # Check individual Python files
    python_files=("validate_backend.py" "test_api_endpoint.py" "test_git_operations.py" "test_error_scenarios.py")
    for file in "${python_files[@]}"; do
        if [ -f "$file" ]; then
            if black --check --diff "$file" 2>/dev/null; then
                print_status "PASS" "Code formatting ($file): Already formatted correctly"
            else
                echo "Applying Black formatting to $file..."
                black "$file"
                print_status "PASS" "Code formatting ($file): Applied successfully"
            fi
        fi
    done
}

# Function to run Flake8 style checking
run_flake8() {
    echo -e "\n${BLUE}📋 Running Flake8 Style Checking${NC}"
    echo "================================================"
    
    if ! command_exists flake8; then
        print_status "FAIL" "Flake8 not installed"
        return 1
    fi
    
    # Check if .flake8 config exists
    if [ ! -f ".flake8" ]; then
        echo "Creating .flake8 configuration..."
        cat > .flake8 << EOF
[flake8]
max-line-length = 88
extend-ignore = E203, W503, E501
exclude = 
    .git,
    __pycache__,
    .venv,
    venv,
    .mypy_cache,
    build,
    dist,
    node_modules
per-file-ignores =
    __init__.py:F401
max-complexity = 10
EOF
    fi
    
    # Run Flake8 on backend files
    backend_files="api/"
    if [ -d "$backend_files" ]; then
        echo "Checking style in $backend_files..."
        if flake8 $backend_files; then
            print_status "PASS" "Style checking (flake8): No issues found in api/"
        else
            print_status "FAIL" "Style checking (flake8): Issues found in api/"
        fi
    fi
    
    # Check individual Python files
    python_files=("validate_backend.py" "test_api_endpoint.py" "test_git_operations.py" "test_error_scenarios.py")
    for file in "${python_files[@]}"; do
        if [ -f "$file" ]; then
            if flake8 "$file"; then
                print_status "PASS" "Style checking ($file): No issues found"
            else
                print_status "FAIL" "Style checking ($file): Issues found"
            fi
        fi
    done
}

# Function to run MyPy type checking
run_mypy() {
    echo -e "\n${BLUE}🔍 Running MyPy Type Checking${NC}"
    echo "================================================"
    
    if ! command_exists mypy; then
        print_status "FAIL" "MyPy not installed"
        return 1
    fi
    
    # Check if .mypy.ini config exists
    if [ ! -f ".mypy.ini" ]; then
        echo "Creating .mypy.ini configuration..."
        cat > .mypy.ini << EOF
[mypy]
python_version = 3.8
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True

[mypy-requests.*]
ignore_missing_imports = True

[mypy-pytest.*]
ignore_missing_imports = True
EOF
    fi
    
    # Run MyPy on backend files
    backend_files="api/"
    if [ -d "$backend_files" ]; then
        echo "Type checking $backend_files..."
        if mypy $backend_files; then
            print_status "PASS" "Type checking (mypy): No issues found in api/"
        else
            print_status "WARN" "Type checking (mypy): Issues found in api/ (may need type annotations)"
        fi
    fi
    
    # Check individual Python files
    python_files=("validate_backend.py")
    for file in "${python_files[@]}"; do
        if [ -f "$file" ]; then
            if mypy "$file"; then
                print_status "PASS" "Type checking ($file): No issues found"
            else
                print_status "WARN" "Type checking ($file): Issues found (may need type annotations)"
            fi
        fi
    done
}

# Function to run Bandit security scanning
run_bandit() {
    echo -e "\n${BLUE}🛡️  Running Bandit Security Scanning${NC}"
    echo "================================================"
    
    if ! command_exists bandit; then
        print_status "FAIL" "Bandit not installed"
        return 1
    fi
    
    # Run Bandit on backend files
    backend_files="api/"
    if [ -d "$backend_files" ]; then
        echo "Security scanning $backend_files..."
        if bandit -r $backend_files -f json -o bandit-report.json 2>/dev/null; then
            print_status "PASS" "Security scanning (bandit): No issues found in api/"
        else
            # Check if it's just warnings
            if bandit -r $backend_files -ll 2>/dev/null; then
                print_status "PASS" "Security scanning (bandit): Only low-level issues found"
            else
                print_status "WARN" "Security scanning (bandit): Issues found in api/"
            fi
        fi
        
        # Clean up report file
        rm -f bandit-report.json
    fi
    
    # Check individual Python files
    python_files=("validate_backend.py" "test_api_endpoint.py" "test_git_operations.py" "test_error_scenarios.py")
    for file in "${python_files[@]}"; do
        if [ -f "$file" ]; then
            if bandit "$file" -f json 2>/dev/null; then
                print_status "PASS" "Security scanning ($file): No issues found"
            else
                if bandit "$file" -ll 2>/dev/null; then
                    print_status "PASS" "Security scanning ($file): Only low-level issues found"
                else
                    print_status "WARN" "Security scanning ($file): Issues found"
                fi
            fi
        fi
    done
}

# Function to run Shellcheck on shell scripts
run_shellcheck() {
    echo -e "\n${BLUE}📜 Running Shellcheck on Shell Scripts${NC}"
    echo "================================================"
    
    if ! command_exists shellcheck; then
        print_status "WARN" "Shellcheck not installed (optional)"
        return 0
    fi
    
    # Check start.sh if it exists
    if [ -f "start.sh" ]; then
        echo "Checking start.sh..."
        if shellcheck start.sh; then
            print_status "PASS" "Shell script validation (start.sh): No issues found"
        else
            print_status "WARN" "Shell script validation (start.sh): Issues found"
        fi
    fi
    
    # Check other shell scripts
    shell_scripts=("test_error_handling.sh" "lint-backend" "lint-frontend" "lint-design")
    for script in "${shell_scripts[@]}"; do
        if [ -f "$script" ]; then
            if shellcheck "$script"; then
                print_status "PASS" "Shell script validation ($script): No issues found"
            else
                print_status "WARN" "Shell script validation ($script): Issues found"
            fi
        fi
    done
}

# Function to print summary
print_summary() {
    echo -e "\n${'='*60}"
    echo -e "${BLUE}BACKEND LINTING SUMMARY${NC}"
    echo ${'='*60}
    
    echo "Total Checks: $TOTAL_CHECKS"
    echo -e "${GREEN}Passed: $PASSED_CHECKS${NC}"
    echo -e "${RED}Failed: $FAILED_CHECKS${NC}"
    
    if [ $FAILED_CHECKS -eq 0 ]; then
        echo -e "\n${GREEN}🎉 All backend linting checks passed!${NC}"
        echo -e "${GREEN}✅ Backend code quality validated${NC}"
        return 0
    else
        echo -e "\n${RED}⚠️  Some backend linting checks failed${NC}"
        echo -e "${RED}❌ Fix issues before deployment${NC}"
        return 1
    fi
}

# Main execution
main() {
    echo -e "${BLUE}🧹 Starting Backend Linting${NC}"
    echo ${'='*60}
    
    # Install dependencies if needed
    install_dependencies
    
    # Run all linting checks
    run_black
    run_flake8
    run_mypy
    run_bandit
    run_shellcheck
    
    # Print summary and exit
    print_summary
    exit $?
}

# Run main function
main "$@"