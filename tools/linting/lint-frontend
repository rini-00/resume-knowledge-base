#!/bin/bash

# Frontend Linting Script
# Comprehensive React/JavaScript linting for the Resume Logger frontend

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    if [ "$status" = "PASS" ]; then
        echo -e "${GREEN}✅ $message${NC}"
        ((PASSED_CHECKS++))
    elif [ "$status" = "FAIL" ]; then
        echo -e "${RED}❌ $message${NC}"
        ((FAILED_CHECKS++))
    elif [ "$status" = "INFO" ]; then
        echo -e "${BLUE}ℹ️  $message${NC}"
    elif [ "$status" = "WARN" ]; then
        echo -e "${YELLOW}⚠️  $message${NC}"
    fi
    ((TOTAL_CHECKS++))
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if npm package is installed
npm_package_exists() {
    npm list "$1" >/dev/null 2>&1 || npm list -g "$1" >/dev/null 2>&1
}

# Function to install missing dependencies
install_dependencies() {
    echo -e "${BLUE}📦 Checking frontend linting dependencies...${NC}"
    
    # Check if package.json exists
    if [ ! -f "package.json" ]; then
        print_status "FAIL" "package.json not found"
        return 1
    fi
    
    # Install dependencies if not available
    if ! npm_package_exists "eslint" || ! npm_package_exists "prettier"; then
        echo "Installing frontend linting dependencies..."
        npm install --save-dev eslint prettier eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y
    fi
}

# Function to run Prettier formatting
run_prettier() {
    echo -e "\n${BLUE}🎨 Running Prettier Code Formatting${NC}"
    echo "================================================"
    
    if ! npm_package_exists "prettier"; then
        print_status "FAIL" "Prettier not installed"
        return 1
    fi
    
    # Check if .prettierrc exists
    if [ ! -f ".prettierrc" ]; then
        echo "Prettier configuration found"
    fi
    
    # Create .prettierignore if it doesn't exist
    if [ ! -f ".prettierignore" ]; then
        echo "Creating .prettierignore..."
        cat > .prettierignore << EOF
node_modules/
build/
dist/
*.min.js
*.min.css
package-lock.json
EOF
    fi
    
    # Run Prettier on frontend files
    frontend_files=("agent/" "src/")
    for dir in "${frontend_files[@]}"; do
        if [ -d "$dir" ]; then
            echo "Formatting files in $dir..."
            if npx prettier --check "$dir**/*.{js,jsx}" 2>/dev/null; then
                print_status "PASS" "Code formatting ($dir): Already formatted correctly"
            else
                echo "Applying Prettier formatting to $dir..."
                npx prettier --write "$dir**/*.{js,jsx}"
                print_status "PASS" "Code formatting ($dir): Applied successfully"
            fi
        fi
    done
    
    # Check individual files
    individual_files=("webpack.config.js")
    for file in "${individual_files[@]}"; do
        if [ -f "$file" ]; then
            if npx prettier --check "$file" 2>/dev/null; then
                print_status "PASS" "Code formatting ($file): Already formatted correctly"
            else
                echo "Applying Prettier formatting to $file..."
                npx prettier --write "$file"
                print_status "PASS" "Code formatting ($file): Applied successfully"
            fi
        fi
    done
    
    # Check CSS files
    css_files=("src/index.css")
    for file in "${css_files[@]}"; do
        if [ -f "$file" ]; then
            if npx prettier --check "$file" 2>/dev/null; then
                print_status "PASS" "Code formatting ($file): Already formatted correctly"
            else
                echo "Applying Prettier formatting to $file..."
                npx prettier --write "$file"
                print_status "PASS" "Code formatting ($file): Applied successfully"
            fi
        fi
    done
}

# Function to run ESLint
run_eslint() {
    echo -e "\n${BLUE}📋 Running ESLint Code Quality Checks${NC}"
    echo "================================================"
    
    if ! npm_package_exists "eslint"; then
        print_status "FAIL" "ESLint not installed"
        return 1
    fi
    
    # Check if .eslintrc.js exists
    if [ ! -f ".eslintrc.js" ]; then
        echo "ESLint configuration found"
    fi
    
    # Create .eslintignore if it doesn't exist
    if [ ! -f ".eslintignore" ]; then
        echo "Creating .eslintignore..."
        cat > .eslintignore << EOF
node_modules/
build/
dist/
*.min.js
webpack.config.js
EOF
    fi
    
    # Run ESLint on frontend files
    frontend_files=("agent/" "src/")
    for dir in "${frontend_files[@]}"; do
        if [ -d "$dir" ]; then
            echo "Linting files in $dir..."
            if npx eslint "$dir**/*.{js,jsx}" --fix 2>/dev/null; then
                print_status "PASS" "Code quality ($dir): No issues found"
            else
                # Try without --fix to see if there are non-fixable issues
                if npx eslint "$dir**/*.{js,jsx}" 2>/dev/null; then
                    print_status "PASS" "Code quality ($dir): Issues auto-fixed"
                else
                    print_status "WARN" "Code quality ($dir): Issues found (may need manual fixes)"
                fi
            fi
        fi
    done
}

# Function to validate React patterns
validate_react_patterns() {
    echo -e "\n${BLUE}🔧 Validating React Patterns${NC}"
    echo "================================================"
    
    # Check ResumeLogger component
    if [ -f "agent/ResumeLogger.jsx" ]; then
        echo "Checking React patterns in ResumeLogger.jsx..."
        
        # Check for hooks usage
        if grep -q "useState\|useEffect\|useCallback" "agent/ResumeLogger.jsx"; then
            print_status "PASS" "React hooks: Modern hooks pattern detected"
        else
            print_status "WARN" "React hooks: No hooks detected (may be using class components)"
        fi
        
        # Check for useCallback optimization
        if grep -q "useCallback" "agent/ResumeLogger.jsx"; then
            print_status "PASS" "Performance optimization: useCallback usage found"
        else
            print_status "WARN" "Performance optimization: Consider using useCallback for event handlers"
        fi
        
        # Check for proper event handling
        if grep -q "onClick\|onChange\|onSubmit" "agent/ResumeLogger.jsx"; then
            print_status "PASS" "Event handling: Event handlers detected"
        else
            print_status "WARN" "Event handling: No event handlers detected"
        fi
        
        # Check for JSX accessibility
        if grep -q "aria-\|role=" "agent/ResumeLogger.jsx"; then
            print_status "PASS" "Accessibility: ARIA attributes found"
        else
            print_status "WARN" "Accessibility: Consider adding ARIA attributes"
        fi
    else
        print_status "WARN" "ResumeLogger.jsx not found"
    fi
    
    # Check App.js
    if [ -f "src/App.js" ]; then
        echo "Checking React patterns in App.js..."
        
        # Check for proper component structure
        if grep -q "function\|const.*=" "src/App.js"; then
            print_status "PASS" "Component structure: Functional component pattern detected"
        else
            print_status "WARN" "Component structure: Consider using functional components"
        fi
        
        # Check for error boundaries
        if grep -q -i "error.*boundary\|componentDidCatch\|getDerivedStateFromError" "src/App.js"; then
            print_status "PASS" "Error handling: Error boundary patterns found"
        else
            print_status "WARN" "Error handling: Consider implementing error boundaries"
        fi
    else
        print_status "WARN" "App.js not found"
    fi
}

# Function to validate accessibility
validate_accessibility() {
    echo -e "\n${BLUE}♿ Validating Accessibility Compliance${NC}"
    echo "================================================"
    
    # Check for accessibility patterns in React components
    react_files=("agent/ResumeLogger.jsx" "src/App.js")
    for file in "${react_files[@]}"; do
        if [ -f "$file" ]; then
            echo "Checking accessibility in $file..."
            
            # Check for ARIA labels
            if grep -q "aria-label\|aria-labelledby\|aria-describedby" "$file"; then
                print_status "PASS" "ARIA labels ($file): Found accessibility labels"
            else
                print_status "WARN" "ARIA labels ($file): Consider adding ARIA labels"
            fi
            
            # Check for semantic HTML
            if grep -q "<button\|<input\|<textarea\|<select\|<label" "$file"; then
                print_status "PASS" "Semantic HTML ($file): Interactive elements found"
            else
                print_status "INFO" "Semantic HTML ($file): No interactive elements detected"
            fi
            
            # Check for alt text patterns
            if grep -q "alt=" "$file"; then
                print_status "PASS" "Alt text ($file): Alt attributes found"
            else
                print_status "INFO" "Alt text ($file): No images with alt text detected"
            fi
        fi
    done
}

# Function to validate build configuration
validate_build_config() {
    echo -e "\n${BLUE}📦 Validating Build Configuration${NC}"
    echo "================================================"
    
    # Check webpack.config.js
    if [ -f "webpack.config.js" ]; then
        echo "Checking webpack configuration..."
        
        # Basic syntax check
        if node -c webpack.config.js 2>/dev/null; then
            print_status "PASS" "Webpack config: Syntax validation passed"
        else
            print_status "FAIL" "Webpack config: Syntax errors found"
        fi
        
        # Check for common patterns
        if grep -q "entry\|output\|module\|plugins" webpack.config.js; then
            print_status "PASS" "Webpack config: Essential configuration sections found"
        else
            print_status "WARN" "Webpack config: Missing essential configuration sections"
        fi
    else
        print_status "WARN" "webpack.config.js not found"
    fi
    
    # Check package.json scripts
    if [ -f "package.json" ]; then
        echo "Checking package.json scripts..."
        
        if grep -q '"start"\|"build"\|"test"' package.json; then
            print_status "PASS" "NPM scripts: Essential scripts found"
        else
            print_status "WARN" "NPM scripts: Missing essential scripts"
        fi
    fi
}

# Function to print summary
print_summary() {
    printf '\n'
    printf '=%.0s' {1..60}; echo
    echo -e "${BLUE}FRONTEND LINTING SUMMARY${NC}"
    printf '=%.0s' {1..60}; echo
    
    echo "Total Checks: $TOTAL_CHECKS"
    echo -e "${GREEN}Passed: $PASSED_CHECKS${NC}"
    echo -e "${RED}Failed: $FAILED_CHECKS${NC}"
    
    if [ $FAILED_CHECKS -eq 0 ]; then
        echo -e "\n${GREEN}🎉 All frontend linting checks passed!${NC}"
        echo -e "${GREEN}✅ Frontend code quality validated${NC}"
        return 0
    else
        echo -e "\n${RED}⚠️  Some frontend linting checks failed${NC}"
        echo -e "${RED}❌ Fix issues before deployment${NC}"
        return 1
    fi
}

# Main execution
main() {
    echo -e "${BLUE}🧹 Starting Frontend Linting${NC}"
    printf '=%.0s' {1..60}; echo
    
    # Install dependencies if needed
    install_dependencies
    
    # Run all linting checks
    run_prettier
    run_eslint
    validate_react_patterns
    validate_accessibility
    validate_build_config
    
    # Print summary and exit
    print_summary
    exit $?
}

# Run main function
main "$@"