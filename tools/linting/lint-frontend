#!/bin/bash
# Frontend linting script for React/JavaScript code

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Function to create divider
printf_divider() {
    printf '=%.0s' {1..60}
    printf '\n'
}

# Function to print status
print_status() {
    local status=$1
    local message=$2
    case $status in
        "PASS")
            echo -e "${GREEN}‚úì $message${NC}"
            ;;
        "FAIL")
            echo -e "${RED}‚úó $message${NC}"
            ;;
        "WARN")
            echo -e "${YELLOW}‚ö† $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚Ñπ $message${NC}"
            ;;
    esac
}

echo -e "${BLUE}üé® Frontend Linting${NC}"
printf_divider

# Initialize counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Check if we're in a git repository
if ! git rev-parse --show-toplevel >/dev/null 2>&1; then
    print_status "FAIL" "Not in a Git repository"
    exit 1
fi

# Get repository root
REPO_ROOT=$(git rev-parse --show-toplevel)
cd "$REPO_ROOT" || exit 1

# Check if JavaScript/JSX files exist
if ! find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | grep -v node_modules | head -1 | grep -q .; then
    print_status "WARN" "No JavaScript/React files found to lint"
    exit 0
fi

# Check if package.json exists
if [[ ! -f "package.json" ]]; then
    print_status "WARN" "package.json not found - some checks may be skipped"
fi

# Check if node_modules exists
if [[ ! -d "node_modules" ]]; then
    print_status "WARN" "node_modules not found - consider running 'npm install'"
fi

echo -e "\n${BLUE}üìã Running ESLint (JavaScript Linting)${NC}"
printf_divider
((TOTAL_CHECKS++))

if command -v npx >/dev/null 2>&1 && [[ -f ".eslintrc.js" || -f ".eslintrc.json" || -f ".eslintrc.yml" ]]; then
    if npx eslint . --ext .js,.jsx,.ts,.tsx --ignore-path .eslintignore 2>/dev/null; then
        print_status "PASS" "ESLint: JavaScript linting passed"
        ((PASSED_CHECKS++))
    else
        print_status "FAIL" "ESLint: JavaScript linting issues found"
        npx eslint . --ext .js,.jsx,.ts,.tsx --ignore-path .eslintignore || true
        ((FAILED_CHECKS++))
    fi
elif command -v eslint >/dev/null 2>&1; then
    if eslint . --ext .js,.jsx,.ts,.tsx --ignore-path .eslintignore 2>/dev/null; then
        print_status "PASS" "ESLint: JavaScript linting passed"
        ((PASSED_CHECKS++))
    else
        print_status "FAIL" "ESLint: JavaScript linting issues found"
        eslint . --ext .js,.jsx,.ts,.tsx --ignore-path .eslintignore || true
        ((FAILED_CHECKS++))
    fi
else
    print_status "WARN" "ESLint not available - skipping JavaScript linting"
fi

echo -e "\n${BLUE}üéØ Running Prettier (Code Formatting)${NC}"
printf_divider
((TOTAL_CHECKS++))

if command -v npx >/dev/null 2>&1 && [[ -f ".prettierrc" || -f ".prettierrc.json" || -f ".prettierrc.js" ]]; then
    if npx prettier --check . --ignore-path .prettierignore 2>/dev/null; then
        print_status "PASS" "Prettier: Code formatting is correct"
        ((PASSED_CHECKS++))
    else
        print_status "FAIL" "Prettier: Code formatting issues found"
        echo "Running prettier to fix formatting..."
        npx prettier --write . --ignore-path .prettierignore 2>/dev/null || true
        ((FAILED_CHECKS++))
    fi
elif command -v prettier >/dev/null 2>&1; then
    if prettier --check . --ignore-path .prettierignore 2>/dev/null; then
        print_status "PASS" "Prettier: Code formatting is correct"
        ((PASSED_CHECKS++))
    else
        print_status "FAIL" "Prettier: Code formatting issues found"
        echo "Running prettier to fix formatting..."
        prettier --write . --ignore-path .prettierignore 2>/dev/null || true
        ((FAILED_CHECKS++))
    fi
else
    print_status "WARN" "Prettier not available - skipping code formatting"
fi

echo -e "\n${BLUE}üì¶ Checking Package Dependencies${NC}"
printf_divider
((TOTAL_CHECKS++))

if [[ -f "package.json" ]]; then
    if command -v npm >/dev/null 2>&1; then
        if npm list --depth=0 >/dev/null 2>&1; then
            print_status "PASS" "npm: Package dependencies are satisfied"
            ((PASSED_CHECKS++))
        else
            print_status "FAIL" "npm: Package dependency issues found"
            npm list --depth=0 || true
            ((FAILED_CHECKS++))
        fi
    else
        print_status "WARN" "npm not available - skipping dependency check"
    fi
else
    print_status "INFO" "No package.json found - skipping dependency check"
    ((PASSED_CHECKS++))
fi

echo -e "\n${BLUE}üîç Checking for Common Issues${NC}"
printf_divider
((TOTAL_CHECKS++))

# Check for console.log statements (should be removed in production)
if find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | grep -v node_modules | xargs grep -l "console\.log" 2>/dev/null | head -1 | grep -q .; then
    print_status "WARN" "Console.log statements found - consider removing for production"
else
    print_status "PASS" "No console.log statements found"
fi

# Check for debugger statements
if find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | grep -v node_modules | xargs grep -l "debugger" 2>/dev/null | head -1 | grep -q .; then
    print_status "FAIL" "Debugger statements found - remove before deployment"
    ((FAILED_CHECKS++))
else
    print_status "PASS" "No debugger statements found"
    ((PASSED_CHECKS++))
fi

# Print summary
echo -e "\n"
printf_divider
echo -e "${BLUE}FRONTEND LINTING SUMMARY${NC}"
printf_divider

echo "Total Checks: $TOTAL_CHECKS"
echo -e "${GREEN}Passed: $PASSED_CHECKS${NC}"
echo -e "${RED}Failed: $FAILED_CHECKS${NC}"

if [ $FAILED_CHECKS -eq 0 ]; then
    echo -e "\n${GREEN}üéâ All frontend linting checks passed!${NC}"
    echo -e "${GREEN}‚úÖ Code quality validated${NC}"
    exit 0
else
    echo -e "\n${RED}‚ö†Ô∏è  Frontend linting issues found${NC}"
    echo -e "${RED}‚ùå Fix issues before deployment${NC}"
    exit 1
fi